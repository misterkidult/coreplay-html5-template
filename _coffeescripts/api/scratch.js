// Generated by CoffeeScript 1.10.0
(function() {
  var angleBetween, distanceBetween, getFilledInPixels, getMouse, handleMouseDown, handleMouseMove, handleMouseUp, handlePercentage;
  distanceBetween = function(point1, point2) {
    return Math.sqrt(Math.pow(point2.x - point1.x, 2) + Math.pow(point2.y - point1.y, 2));
  };
  angleBetween = function(point1, point2) {
    return Math.atan2(point2.x - point1.x, point2.y - point1.y);
  };
  getFilledInPixels = function(stride) {
    var count, i, l, pdata, pixels, total;
    if (!stride || stride < 1) {
      stride = 1;
    }
    pixels = ctx.getImageData(0, 0, canvasWidth, canvasHeight);
    pdata = pixels.data;
    l = pdata.length;
    total = l / stride;
    count = 0;
    i = count = 0;
    while (i < l) {
      if (parseInt(pdata[i]) === 0) {
        count++;
      }
      i += stride;
    }
    return Math.round(count / total * 100);
  };
  getMouse = function(e, canvas) {
    var mx, my, offsetX, offsetY;
    offsetX = 0;
    offsetY = 0;
    mx = void 0;
    my = void 0;
    if (canvas.offsetParent !== void 0) {
      while (true) {
        offsetX += canvas.offsetLeft;
        offsetY += canvas.offsetTop;
        if (!(canvas = canvas.offsetParent)) {
          break;
        }
      }
    }
    mx = e.pageX - offsetX;
    my = e.pageY - offsetY;
    return {
      x: mx,
      y: my
    };
  };
  handlePercentage = function(filledInPixels) {
    filledInPixels = filledInPixels || 0;
    console.log(filledInPixels + '%');
    if (filledInPixels > 50) {
      canvas.parentNode.removeChild(canvas);
    }
  };
  handleMouseDown = function(e) {
    var isDrawing, lastPoint;
    isDrawing = true;
    lastPoint = getMouse(e, canvas);
  };
  handleMouseMove = function(e) {
    var angle, currentPoint, dist, i, lastPoint, x, y;
    if (!isDrawing) {
      return;
    }
    e.preventDefault();
    currentPoint = getMouse(e, canvas);
    dist = distanceBetween(lastPoint, currentPoint);
    angle = angleBetween(lastPoint, currentPoint);
    x = void 0;
    y = void 0;
    i = 0;
    while (i < dist) {
      x = lastPoint.x + Math.sin(angle) * i - 25;
      y = lastPoint.y + Math.cos(angle) * i - 25;
      ctx.globalCompositeOperation = 'destination-out';
      ctx.drawImage(brush, x, y);
      i++;
    }
    lastPoint = currentPoint;
    handlePercentage(getFilledInPixels(32));
  };
  handleMouseUp = function(e) {
    var isDrawing;
    isDrawing = false;
  };
})();


//# sourceMappingURL=scratch.js.map
